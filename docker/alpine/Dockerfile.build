#-----------------BUILDER-----------------
#-----------------------------------------
FROM node:22-alpine3.22 AS builder

# Install build dependencies and required libs
RUN apk add --no-cache \
  python3 build-base meson ninja pkgconfig glib-dev expat-dev \
  libexif-dev jpeg-dev libpng-dev tiff-dev libwebp-dev libheif-dev \
  imagemagick-dev fftw-dev lcms2-dev libimagequant-dev orc-dev \
  wget tar

# Build libvips (with HEIF support)
ARG VIPS_VERSION=8.17.1
WORKDIR /tmp
RUN wget https://github.com/libvips/libvips/releases/download/v${VIPS_VERSION}/vips-${VIPS_VERSION}.tar.xz && \
    tar -xf vips-${VIPS_VERSION}.tar.xz && \
    cd vips-${VIPS_VERSION} && \
    meson setup build --libdir lib -Dintrospection=false -Dexamples=false --buildtype=release && \
    cd build && \
    meson compile && \
    meson install && \
    rm -rf /tmp/vips-${VIPS_VERSION}

ENV LD_LIBRARY_PATH=/usr/local/lib \
    SHARP_FORCE_GLOBAL_LIBVIPS=1

# Copy app and install dependencies
COPY pigallery2-release /app
WORKDIR /app
RUN npm install --unsafe-perm --fetch-timeout=90000 && \
    mkdir -p /app/data/{config,db,images,tmp}


#-----------------MAIN--------------------
#-----------------------------------------
FROM node:22-alpine3.22 AS main
WORKDIR /app

# Copy system libs (libvips, libheif, etc.)
COPY --from=builder /usr/local /usr/local

ENV NODE_ENV=production \
    LD_LIBRARY_PATH=/usr/local/lib \
    SHARP_FORCE_GLOBAL_LIBVIPS=1 \
    default-Database-dbFolder=/app/data/db \
    default-Media-folder=/app/data/images \
    default-Media-tempFolder=/app/data/tmp \
    default-Extensions-folder=/app/data/config/extensions \
    PI_DOCKER=true

EXPOSE 80
ARG TARGETARCH

RUN apk add --no-cache \
    libheif libpng libjpeg-turbo libwebp tiff lcms2 fftw libimagequant imagemagick ffmpeg \
    && if [ "$TARGETARCH" = "amd64" ]; then \
        echo "Building for amd64, adding intel-media-driver"; \
        apk add --no-cache intel-media-driver; \
    fi \
    && rm -rf /var/cache/apk/*

# Copy built app
COPY --from=builder /app /app

# Run build-time diagnostics to verify
RUN ["node", "./src/backend/index", "--expose-gc", "--run-diagnostics", "--config-path=/app/diagnostics-config.json", "--Server-Log-level=silly"]

HEALTHCHECK --interval=40s --timeout=30s --retries=3 --start-period=60s \
  CMD wget --quiet --tries=1 --no-check-certificate --spider http://127.0.0.1:80/heartbeat || exit 1

ENTRYPOINT ["node", "./src/backend/index", "--expose-gc", "--config-path=/app/data/config/config.json"]
